<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="playlist">
    <resultMap id="playlistResultMap" type="Playlist">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="title" column="title"/>
        <result property="image" column="image"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="createdDate" column="created_date"/>

        <result property="playlistId" column="playlist_id" />
        <result property="playlistTitle" column="playlist_title" />
        <result property="lastVideoThumbnail" column="last_video_thumbnail" />
    </resultMap>

    <select id="findPlaylistsWithLastThumbnail" resultMap="playlistResultMap">
        SELECT
        p.id AS playlist_id,
        p.title AS playlist_title,
        last_videos.thumbnail AS last_video_thumbnail,
        p.view_count,
        p.like_count,
        p.created_date
        FROM playlists p
        LEFT JOIN (
        SELECT
        pv.playlist_id,
        v.thumbnail,
        ROW_NUMBER() OVER (PARTITION BY pv.playlist_id ORDER BY pv.created_date DESC) AS rn
        FROM playlist_videos pv
        JOIN videos v ON pv.video_id = v.id
        ) last_videos
        ON p.id = last_videos.playlist_id
        AND last_videos.rn = 1
        WHERE p.user_id = #{userId}
        ORDER BY p.created_date DESC
    </select>

    <select id="getPlaylistsWithLastThumbnailByUserId" resultMap="playlistResultMap">
        SELECT
        p.id AS playlist_id,
        p.user_id AS user_id,
        p.title AS playlist_title,
        p.image AS image,
        p.view_count AS view_count,
        p.like_count AS like_count,
        p.created_date AS created_date,
        last_videos.thumbnail AS last_video_thumbnail
        FROM playlists p
        LEFT JOIN (
        SELECT
        pv.playlist_id,
        v.thumbnail,
        ROW_NUMBER() OVER (PARTITION BY pv.playlist_id ORDER BY pv.created_date DESC) AS rn
        FROM playlist_videos pv
        JOIN videos v ON pv.video_id = v.id
        ) last_videos
        ON p.id = last_videos.playlist_id
        AND last_videos.rn = 1
        WHERE p.user_id = #{userId}
        ORDER BY p.created_date DESC
    </select>

    <insert id="save" parameterType="Playlist">
        INSERT INTO playlists (user_id,
        title, view_count, like_count,
        created_date)
        VALUES (#{userId},
        #{title}, 0, 0, SYSDATE)
    </insert>

    <update id="incrementViewCount" parameterType="Playlist">
        UPDATE playlists
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>

    <update id="incrementLikeCount" parameterType="Playlist">
        UPDATE playlists
        SET like_count = like_count + 1
        WHERE id = #{id}
    </update>

    <update id="decrementLikeCount" parameterType="Playlist">
        UPDATE playlists
        SET like_count = like_count - 1
        WHERE id = #{id}
    </update>

    <select id="getPlaylistById" resultMap="playlistResultMap">
        SELECT * FROM playlists WHERE id = #{id}
    </select>

    <select id="getAllPlaylists" resultMap="playlistResultMap">
        SELECT * FROM playlists
    </select>

    <select id="getPlaylistsByTitle" resultMap="playlistResultMap">
        SELECT * FROM playlists WHERE title = #{title}
    </select>

    <select id="getPlaylistsByUserId" resultMap="playlistResultMap">
        SELECT * FROM
        playlists WHERE user_id = #{userId}
    </select>

    <update id="updatePlaylist" parameterType="Playlist">
        UPDATE playlists
        SET title = #{title},
        image = #{image}
        WHERE id = #{id}
    </update>

    <delete id="deletePlaylist">
        DELETE FROM playlists WHERE id = #{id}
    </delete>

</mapper>
