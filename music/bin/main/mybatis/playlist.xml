<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="playlist">
    <resultMap id="playlistResultMap" type="Playlist">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="nickname" column="nickname"/>
        <result property="title" column="title"/>
        <result property="image" column="image"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="createdDate" column="created_date"/>
        <result property="videoCount" column="video_count"/>

        <result property="playlistId" column="playlist_id" />
        <result property="playlistTitle" column="playlist_title" />
        <result property="lastVideoThumbnail" column="last_video_thumbnail" />
    </resultMap>

    <select id="findPlaylistsWithLastThumbnail" resultMap="playlistResultMap">
        SELECT
        p.id,
        p.title,
        last_videos.thumbnail AS last_video_thumbnail,
        p.view_count,
        p.like_count,
        p.created_date,
        NVL(video_counts.video_count, 0) AS video_count
        FROM playlists p
        LEFT JOIN (
        SELECT
        pv.playlist_id,
        v.thumbnail,
        ROW_NUMBER() OVER (PARTITION BY pv.playlist_id ORDER BY pv.created_date DESC) AS rn
        FROM playlist_videos pv
        JOIN videos v ON pv.video_id = v.id
        ) last_videos ON p.id = last_videos.playlist_id AND last_videos.rn = 1
        LEFT JOIN (
        SELECT playlist_id, COUNT(*) AS video_count
        FROM playlist_videos
        GROUP BY playlist_id
        ) video_counts ON p.id = video_counts.playlist_id
        WHERE p.user_id = #{userId}
        ORDER BY p.created_date DESC
    </select>

    <insert id="save" parameterType="Playlist">
        INSERT INTO playlists (user_id,
        title, view_count, like_count,
        created_date)
        VALUES (#{userId},
        #{title}, 0, 0, SYSDATE)
    </insert>

    <update id="incrementViewCount" parameterType="Playlist">
        UPDATE playlists
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>

    <update id="incrementLikeCount" parameterType="Playlist">
        UPDATE playlists
        SET like_count = like_count + 1
        WHERE id = #{id}
    </update>

    <update id="decrementLikeCount" parameterType="Playlist">
        UPDATE playlists
        SET like_count = like_count - 1
        WHERE id = #{id}
    </update>

    <select id="getPlaylistById" resultMap="playlistResultMap" parameterType="int">
        SELECT
        p.*,
        v.thumbnail AS last_video_thumbnail,
        u.nickname
        FROM playlists p
        LEFT JOIN (
        SELECT sub.playlist_id, sub.thumbnail
        FROM (
        SELECT pv.playlist_id, v.thumbnail,
        ROW_NUMBER() OVER (PARTITION BY pv.playlist_id ORDER BY pv.created_date DESC) AS rn
        FROM playlist_videos pv
        JOIN videos v ON pv.video_id = v.id
        ) sub
        WHERE sub.rn = 1
        ) v ON p.id = v.playlist_id
        JOIN users u ON p.user_id = u.id
        WHERE p.id = #{id}
    </select>

    <select id="getAllPlaylists" resultMap="playlistResultMap">
        SELECT * FROM playlists
    </select>

    <select id="getPlaylistsByTitle" resultMap="playlistResultMap">
        SELECT * FROM playlists WHERE title = #{title}
    </select>

    <select id="getPlaylistsByUserId" resultMap="playlistResultMap">
        SELECT * FROM
        playlists WHERE user_id = #{userId}
    </select>

    <update id="updatePlaylist" parameterType="Playlist">
        UPDATE playlists
        SET title = #{title},
        image = #{image}
        WHERE id = #{id}
    </update>

    <delete id="deletePlaylist">
        DELETE FROM playlists WHERE id = #{id}
    </delete>

</mapper>
